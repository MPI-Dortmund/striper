List of java-py equivalent vars
-) FloatProcessor (32-bit floating-point) --> numpy array of float (https://docs.scipy.org/doc/numpy/user/basics.types.html)


LIST OF CHANGES BETWEEN JAVA AND PYTHON CODE
1) from java class to python dict
    -) helicalPicker->gui->SliceRange.java -----> helper.createSliceRange(slice_from,slice_to)
    -) helicalPicker->FilamentDetector->DetectionThresholdRange.java -----> filamentDetector.DetectionThresholdRange(lower_threshold,upper_threshold)
    -) helicalPicker->FilamentDetector->FilamentDetectorContext.java class -----> filamentDetector.filamentDetectorContext(sigma,lower_threshold,upper_threshold)
    -) FilamentEnhancer->FilamentEnhancerContext.java -----> helper.createFilamentEnhancerContext(filament_width, mask_width,angle_step,equalize)
    -) helicalPicker->FilamentDetector->DetectionThresholdRange.java -----> helper.DetectionThresholdRange(lower_threshold,upper_threshold)

2) FilamentEnhancer->MaskCreator_.java now it is a function that returns the mask helper.createMask(int mask_size, int filamentwidth, int maskwidth, int type)

3) helper.py --> getTransformedMasks
   -)   In java it used FHT class that is an subclass of FloatProcessor. It used just for implement the fft 2d (transform()) and its inverse (inverseTransform())
        For this reason we simulate it using "numpy.fft.fft2()" and "numpy.fft.ifft2()"
   -)   For rotating in a bicubic way an image we used scipy.ndimage.rotate() with order=3

