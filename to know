List of java-py equivalent vars
-) FloatProcessor (32-bit floating-point) --> numpy array of float (https://docs.scipy.org/doc/numpy/user/basics.types.html)


LIST OF CHANGES BETWEEN JAVA AND PYTHON CODE
1) from java class to python dict
    -) helicalPicker->gui->SliceRange.java -----> helper.createSliceRange(slice_from,slice_to)
    -) helicalPicker->FilamentDetector->DetectionThresholdRange.java -----> filamentDetector.DetectionThresholdRange(lower_threshold,upper_threshold)
    -) helicalPicker->FilamentDetector->FilamentDetectorContext.java class -----> filamentDetector.filamentDetectorContext(sigma,lower_threshold,upper_threshold)
    -) FilamentEnhancer->FilamentEnhancerContext.java -----> filamentEnhancer.createFilamentEnhancerContext(filament_width, mask_width,angle_step,equalize)
    -) helicalPicker->FilamentDetector->DetectionThresholdRange.java -----> helper.DetectionThresholdRange(lower_threshold,upper_threshold)

2) FilamentEnhancher folder is replaced by the adapted code of https://github.com/MPI-Dortmund/LineEnhancer/blob/master/lineenhancer/line_enhancer.py
    -) In helper I moved "calculate_fourier_mask_stack_vectorized" and remaned as getTransformedMasks
    -) FilamentEnhancer->MaskCreator_.java now it is a function that returns the mask helper.createMask(int mask_size, int filamentwidth, int maskwidth, int type)

3) The helicalPicker->filamnetFilter->FilamentFilter java class is just a bunch of functions use to calculated the filtered lines via  'filterLines' method
   hence I created a bunch of function and in the code I'll call filamentFilter.filterLines(....) that does the whole work



TODO:
    quando tutto funziona sostiutisce le maschere mask con mask numpy (T/F) e applica operazioni vettoriali, se img e' PIL convertila in numpy applica maschera e poi riconvertila.
    Ovviamente se possibile